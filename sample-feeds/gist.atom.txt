<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-US" xmlns:media="http://search.yahoo.com/mrss/" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:gist.github.com,2010:/dreikanter</id>
  <link type="text/html" href="https://gist.github.com/dreikanter" rel="alternate"/>
  <link type="application/atom+xml" href="https://gist.github.com/dreikanter.atom" rel="self"/>
  <title>dreikanter's Gists</title>
  <updated>2012-05-30T03:01:16-07:00</updated>
  <entry>
    <id>tag:gist.github.com,2010:Gist/2835292</id>
    <published>2012-05-30T03:01:16-07:00</published>
    <updated>2012-05-30T03:01:16-07:00</updated>
    <link type="text/html" href="https://gist.github.com/2835292" rel="alternate"/>
    <title>Create tar.gs archive with Python, unpack files back and check the result</title>
    <content type="html">&lt;pre&gt;# Python gzip demo: create and unpack archive

import os
import random
import string
import glob
import tarfile
import shutil
import filecmp


def get_random_word(length):
    return &quot;&quot;.join([random.choice(string.letters + string.digits)
        for i in xrange(length)])


def get_random_text(length):
    total_length = 0
    words = []

    while total_length &lt; length:
        words.append(get_random_word(random.randint(2, 15)))
        total_length = total_length + len(words[-1]) + 1

    return &quot; &quot;.join(words)[:length]


def create_dir(path):
    if not os.path.exists(path):
        os.makedirs(path)


def create_source_files(source_path, size):
    shutil.rmtree(source_dir)
    create_dir(source_path)
    for i in range(10):
        f = file(os.path.join(source_dir, str(i) + &quot;.txt&quot;), &quot;wt&quot;)
        f.write(get_random_text(size))
        f.close()


def okay():
    print(&quot;Done.\n&quot;)


source_dir = &quot;./source&quot;
dest_dir = &quot;./unpacked&quot;
source_file_size = 65536
archive_name = &quot;archive.tar.gz&quot;


print(&quot;Creating source file with random text...&quot;)
create_source_files(source_dir, source_file_size)
okay()

print(&quot;Compressing files to %s...&quot; % archive_name)
tar = tarfile.open(archive_name, &quot;w:gz&quot;)
for file_name in glob.glob(os.path.join(source_dir, &quot;*&quot;)):
    print(&quot;  Adding %s...&quot; % file_name)
    tar.add(file_name, os.path.basename(file_name))
tar.close()
okay()

print(&quot;Decompressing files to %s...&quot; % dest_dir)
shutil.rmtree(dest_dir)
create_dir(dest_dir)
tar = tarfile.open(archive_name, &quot;r:gz&quot;)
for tarinfo in tar:
    print &quot;  Extracting %s (size: %db; type: %s)...&quot; % (tarinfo.name,
        tarinfo.size, &quot;regular file&quot; if tarinfo.isreg() else &quot;directory&quot;
        if tarinfo.isdir() else &quot;something else&quot;)
    tar.extract(tarinfo, dest_dir)
tar.close()
okay()

print(&quot;Comparing source and result...&quot;)
dc = filecmp.dircmp(source_dir, dest_dir)
print(&quot;Same: [%s]&quot; % &quot;, &quot;.join(dc.same_files))
print(&quot;Different: [%s]&quot; % &quot;, &quot;.join(dc.diff_files))
print(&quot;Funny: [%s]&quot; % &quot;, &quot;.join(dc.funny_files))

print(&quot;Test passed.&quot; if len(dc.diff_files) == 0
    and len(dc.funny_files) == 0 else &quot;Test failed.&quot;)
&lt;/pre&gt;</content>
    <media:thumbnail url="https://secure.gravatar.com/avatar/a7d7f1dd6aebef2677f985565e31e97f?s=30&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"/>
    <author>
      <name>dreikanter</name>
    </author>
  </entry>
  <entry>
    <id>tag:gist.github.com,2010:Gist/2787146</id>
    <published>2012-05-25T03:18:12-07:00</published>
    <updated>2012-05-25T03:18:12-07:00</updated>
    <link type="text/html" href="https://gist.github.com/2787146" rel="alternate"/>
    <title>Extract hashtags from a string (w/o regexps) #python</title>
    <content type="html">&lt;pre&gt;text = &quot;&quot;&quot;Sample #line of #text to demonstrate #hashtags
extraction. Here is some duplicate ones: #text #hashtags #tags.&quot;&quot;&quot;


def get_hashtags(text, order=False):
    tags = set([item.strip(&quot;#.,-\&quot;\'&amp;*^!&quot;) for item in text.split() if (item.startswith(&quot;#&quot;) and len(item) &lt; 256)])
    return sorted(tags) if order else tags


print &quot;\n&quot;.join(get_hashtags(text, True))
&lt;/pre&gt;</content>
    <media:thumbnail url="https://secure.gravatar.com/avatar/a7d7f1dd6aebef2677f985565e31e97f?s=30&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"/>
    <author>
      <name>dreikanter</name>
    </author>
  </entry>
  <entry>
    <id>tag:gist.github.com,2010:Gist/2787033</id>
    <published>2012-05-25T02:49:40-07:00</published>
    <updated>2012-05-25T02:49:40-07:00</updated>
    <link type="text/html" href="https://gist.github.com/2787033" rel="alternate"/>
    <title>Parse Gist feed using feedparser and demonstrate Atom data structure #python #feeds</title>
    <content type="html">&lt;pre&gt;import feedparser
from time import mktime
from datetime import datetime


def format_datetime(struct_time):
    return datetime.fromtimestamp(mktime(struct_time))


def read_gist_feed(github_user):
    url = &quot;http://gist.github.com/%s.atom&quot; % github_user
    d = feedparser.parse(url)
    print &quot;Feed title:&quot;, d.feed.title
    print &quot;Link:&quot;, d.feed.link

    if hasattr(d.feed, 'subtitle'):
        print &quot;Subtitle:&quot;, d.feed.subtitle

    print &quot;Updated:&quot;, d.feed.updated
    print &quot;Updated (parsed):&quot;, format_datetime(d.feed.updated_parsed)
    print &quot;Feed ID:&quot;, d.feed.id
    print &quot;\nEntries:&quot;

    for entry in d.entries:
        print &quot; * Title:&quot;, entry.title
        print &quot;   Link: %s&quot;, entry.link
        print &quot;   Published: %s&quot;, format_datetime(entry.published_parsed)
        print &quot;   Updated: %s&quot;, format_datetime(entry.updated_parsed)
        print &quot;   Summary length:&quot;, len(entry.summary)
        print &quot;   Content items count:&quot;, len(entry.content)


read_gist_feed(&quot;dreikanter&quot;)
&lt;/pre&gt;</content>
    <media:thumbnail url="https://secure.gravatar.com/avatar/a7d7f1dd6aebef2677f985565e31e97f?s=30&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"/>
    <author>
      <name>dreikanter</name>
    </author>
  </entry>
  <entry>
    <id>tag:gist.github.com,2010:Gist/2780824</id>
    <published>2011-05-24T03:58:57-07:00</published>
    <updated>2011-05-24T04:10:09-07:00</updated>
    <link type="text/html" href="https://gist.github.com/2780824" rel="alternate"/>
    <title>Dynamic #configuration file inclusion demo</title>
    <content type="html">&lt;pre&gt;# Dynamic configuration file inclusion example.
# This script is intended for demo purposes and home usage only.
# There are intentionally no any security checks.

import imp
import sys

if len(sys.argv) &lt; 2:
    print &quot;Specify a configuration file to include&quot;
    exit(1)

print &quot;Including [%s]&quot; % sys.argv[1]

conf = imp.load_source('conf', sys.argv[1])
print conf.param
&lt;/pre&gt;</content>
    <media:thumbnail url="https://secure.gravatar.com/avatar/a7d7f1dd6aebef2677f985565e31e97f?s=30&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"/>
    <author>
      <name>dreikanter</name>
    </author>
  </entry>
  <entry>
    <id>tag:gist.github.com,2010:Gist/2780734</id>
    <published>2012-05-24T03:26:39-07:00</published>
    <updated>2012-07-24T03:27:02-07:00</updated>
    <link type="text/html" href="https://gist.github.com/2780734" rel="alternate"/>
    <title>pyCrypto.AES file encoding example based on Eli Bendersky post (http://eli.thegreenplace.net/2010/06/25/aes-encryption-of-files-in-python-with-pycrypto/)</title>
    <content type="html">&lt;pre&gt;# pyCrypto.AES file encoding example based on 
# Eli Bendersky post (http://eli.thegreenplace.net/2010/06/25/aes-encryption-of-files-in-python-with-pycrypto/)

from Crypto.Cipher import AES
from Crypto import Random
import os
import random
import struct
import hashlib


def create_source_file(file_name):
    f = open(file_name, &quot;wt&quot;)
    f.write(&quot;Hello!\nThis is an example text file.&quot;)
    f.close()


def write_file(file_name, data):
    f = open(file_name, &quot;w&quot;)
    f.write(data)
    f.close()


def encrypt_file(key, in_filename, out_filename=None, chunksize=64 * 1024):
    &quot;&quot;&quot; Encrypts a file using AES (CBC mode) with the
        given key.

        key:
            The encryption key - a string that must be
            either 16, 24 or 32 bytes long. Longer keys
            are more secure.

        in_filename:
            Name of the input file

        out_filename:
            If None, '&lt;in_filename&gt;.enc' will be used.

        chunksize:
            Sets the size of the chunk which the function
            uses to read and encrypt the file. Larger chunk
            sizes can be faster for some files and machines.
            chunksize must be divisible by 16.
    &quot;&quot;&quot;
    if not out_filename:
        out_filename = in_filename + '.enc'

    iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
    encryptor = AES.new(key, AES.MODE_CBC, iv)
    filesize = os.path.getsize(in_filename)

    with open(in_filename, 'rb') as infile:
        with open(out_filename, 'wb') as outfile:
            outfile.write(struct.pack('&lt;Q', filesize))
            outfile.write(iv)

            while True:
                chunk = infile.read(chunksize)
                if len(chunk) == 0:
                    break
                elif len(chunk) % 16 != 0:
                    chunk += ' ' * (16 - len(chunk) % 16)

                outfile.write(encryptor.encrypt(chunk))


def decrypt_file(key, in_filename, out_filename=None, chunksize=24 * 1024):
    &quot;&quot;&quot; Decrypts a file using AES (CBC mode) with the
        given key. Parameters are similar to encrypt_file,
        with one difference: out_filename, if not supplied
        will be in_filename without its last extension
        (i.e. if in_filename is 'aaa.zip.enc' then
        out_filename will be 'aaa.zip')
    &quot;&quot;&quot;
    if not out_filename:
        out_filename = os.path.splitext(in_filename)[0]

    with open(in_filename, 'rb') as infile:
        origsize = struct.unpack('&lt;Q', infile.read(struct.calcsize('Q')))[0]
        iv = infile.read(16)
        decryptor = AES.new(key, AES.MODE_CBC, iv)

        with open(out_filename, 'wb') as outfile:
            while True:
                chunk = infile.read(chunksize)
                if len(chunk) == 0:
                    break
                outfile.write(decryptor.decrypt(chunk))

            outfile.truncate(origsize)


def md5_for_file(file_name, block_size=2 ** 20):
    md5 = hashlib.md5()
    f = open(file_name, &quot;r&quot;)

    while True:
        data = f.read(block_size)
        if not data:
            break
        md5.update(data)

    f.close()
    return md5.hexdigest()


source_file_name = &quot;1-source.txt&quot;
encoded_file_name = &quot;2-encoded.txt&quot;
decoded_file_name = &quot;3-decoded.txt&quot;

create_source_file(source_file_name)

# Length could be 16, 14 or 32
key = Random.get_random_bytes(16)
encrypt_file(key, source_file_name, encoded_file_name)
decrypt_file(key, encoded_file_name, decoded_file_name)

source_md5 = md5_for_file(source_file_name)
decoded_md5 = md5_for_file(decoded_file_name)

print &quot;Source: %s [%s]&quot; % (source_file_name, source_md5)
print &quot;Encoded: %s&quot; % (source_file_name)
print &quot;Decoded: %s [%s]&quot; % (decoded_file_name, decoded_md5)
print &quot;Hash check %s&quot; % &quot;passed&quot; if source_md5 == decoded_md5 else &quot;not passed&quot;
&lt;/pre&gt;</content>
    <media:thumbnail url="https://secure.gravatar.com/avatar/a7d7f1dd6aebef2677f985565e31e97f?s=30&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"/>
    <author>
      <name>dreikanter</name>
    </author>
  </entry>
  <entry>
    <id>tag:gist.github.com,2010:Gist/2692884</id>
    <published>2012-05-14T02:12:36-07:00</published>
    <updated>2012-05-14T02:12:36-07:00</updated>
    <link type="text/html" href="https://gist.github.com/2692884" rel="alternate"/>
    <title>Demo for two-class communication through the mediator.</title>
    <content type="html">&lt;pre&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;

namespace MediatorDemo
{
    class Dispatcher
    {
        private List&lt;Command&gt; commands;

        private Queue&lt;Command&gt; queue;
        
        private Mediator mediator;

        public delegate void EnqueueCommandHandler(Command command);

        private Command currentCommand;

        public Dispatcher()
        {
            this.commands = new List&lt;Command&gt;();
            this.queue = new Queue&lt;Command&gt;();
            this.mediator = new Mediator(new EnqueueCommandHandler(EnqueueCommand));
        }

        public Command NewCommand(string name)
        {
            Command command = new Command(name, this.mediator);
            this.commands.Add(command);
            mediator.UpdateStatus(command, &quot;initializing&quot;);
            return command;
        }

        private void EnqueueCommand(Command command)
        {
            queue.Enqueue(command);
            mediator.UpdateStatus(command, &quot;enqueued&quot;);
        }

        public void ProcessNextCommand()
        {
            if (currentCommand != null)
            {
                mediator.UpdateStatus(currentCommand, &quot;done&quot;);
                currentCommand = null;
            }

            if (queue.Count == 0) return;

            currentCommand = queue.Dequeue();
            mediator.UpdateStatus(currentCommand, &quot;processing&quot;);
        }
    }

    class Command
    {
        public string Name { get; private set; }

        public string Status { get; private set; }

        private Mediator mediator;

        public Command(string name, Mediator mediator)
        {
            this.Name = name;
            this.mediator = mediator;
            mediator.RegisterStatusChangeHandler(this, new Mediator.StatusChangeHandler(UpdateStatus));
        }

        private void UpdateStatus(string status)
        {
            this.Status = status;
            Trace.WriteLine(&quot;Status updated for &quot; + Name + &quot;: &quot; + status);
        }

        public void Enqueue()
        {
            mediator.Enqueue(this);
        }
    }

    /// &lt;summary&gt;
    /// &#1042; &#1084;&#1077;&#1076;&#1080;&#1072;&#1090;&#1086;&#1088; &#1074;&#1099;&#1085;&#1077;&#1089;&#1077;&#1085;&#1072; &#1074;&#1089;&#1103; &#1088;&#1091;&#1090;&#1080;&#1085;&#1072; &#1087;&#1088;&#1086; &#1074;&#1079;&#1072;&#1080;&#1084;&#1086;&#1076;&#1077;&#1081;&#1089;&#1090;&#1074;&#1080;&#1077; &#1084;&#1077;&#1078;&#1076;&#1091; &#1082;&#1083;&#1072;&#1089;&#1089;&#1072;&#1084;&#1080;
    /// &lt;/summary&gt;
    class Mediator
    {
        public delegate void StatusChangeHandler(string status);

        private Dictionary&lt;Command, StatusChangeHandler&gt; statusChangeHandlers;

        private Dispatcher.EnqueueCommandHandler enqueueCommandHandler;

        public Mediator(Dispatcher.EnqueueCommandHandler enqueueCommandHandler)
        {
            this.statusChangeHandlers = new Dictionary&lt;Command, StatusChangeHandler&gt;();
            this.enqueueCommandHandler = enqueueCommandHandler;
        }

        /// &lt;summary&gt;
        /// &#1052;&#1077;&#1090;&#1086;&#1076;, &#1095;&#1077;&#1088;&#1077;&#1079; &#1082;&#1086;&#1090;&#1086;&#1088;&#1099;&#1081; &#1082;&#1086;&#1084;&#1072;&#1085;&#1076;&#1072; &#1084;&#1086;&#1078;&#1077;&#1090; &#1087;&#1086;&#1076;&#1087;&#1080;&#1089;&#1072;&#1090;&#1100;&#1089;&#1103; &#1085;&#1072; &#1086;&#1073;&#1085;&#1086;&#1074;&#1083;&#1077;&#1085;&#1080;&#1077; &#1089;&#1090;&#1072;&#1090;&#1091;&#1089;&#1072;
        /// &lt;/summary&gt;
        public void RegisterStatusChangeHandler(Command command, StatusChangeHandler handler)
        {
            this.statusChangeHandlers.Add(command, handler);
        }

        /// &lt;summary&gt;
        /// &#1052;&#1077;&#1090;&#1086;&#1076;, &#1082;&#1086;&#1090;&#1086;&#1088;&#1099;&#1084; &#1044;&#1080;&#1089;&#1087;&#1077;&#1090;&#1095;&#1077;&#1088; &#1084;&#1086;&#1078;&#1077;&#1090; &#1086;&#1073;&#1085;&#1086;&#1074;&#1083;&#1103;&#1090;&#1100; &#1089;&#1090;&#1072;&#1090;&#1091;&#1089;&#1099; &#1082;&#1086;&#1084;&#1072;&#1085;&#1076;
        /// &lt;/summary&gt;
        public void UpdateStatus(Command command, string status)
        {
            if (statusChangeHandlers.ContainsKey(command))
            {
                statusChangeHandlers[command](status);
            }
        }

        public void Enqueue(Command command)
        {
            if (this.enqueueCommandHandler != null) this.enqueueCommandHandler(command);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Dispatcher dispatcher = new Dispatcher();
            Command command = dispatcher.NewCommand(&quot;1&quot;);
            command.Enqueue();
            Command command1 = dispatcher.NewCommand(&quot;2&quot;);
            command1.Enqueue();
            dispatcher.ProcessNextCommand();
            dispatcher.ProcessNextCommand();
        }
    }
}&lt;/pre&gt;</content>
    <media:thumbnail url="https://secure.gravatar.com/avatar/a7d7f1dd6aebef2677f985565e31e97f?s=30&amp;d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png"/>
    <author>
      <name>dreikanter</name>
    </author>
  </entry>
</feed>
